{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slot-utils",
  "type": "registry:lib",
  "title": "Slot Utils",
  "description": "Advanced slot-based composition utilities",
  "dependencies": [
    "react"
  ],
  "files": [
    {
      "path": "src/lib/slot-utils.ts",
      "content": "import { cva } from \"class-variance-authority\";\n\n/**\n * Reusable slot utilities for components with start/end slot functionality\n */\n\nexport type SlotSize = \"sm\" | \"default\" | \"lg\" | \"icon\" | null | undefined;\n\n/**\n * Generic slot padding variants - handles padding for components with start/end slots\n */\nexport const slotPaddingVariants = cva(\"\", {\n  variants: {\n    size: {\n      sm: \"\",\n      default: \"\",\n      lg: \"\",\n      icon: \"\",\n    },\n    hasStart: {\n      true: \"\",\n      false: \"\",\n    },\n    hasEnd: {\n      true: \"\",\n      false: \"\",\n    },\n    hasPrefix: {\n      true: \"\",\n      false: \"\",\n    },\n    hasSuffix: {\n      true: \"\",\n      false: \"\",\n    },\n  },\n  compoundVariants: [\n    // Small size padding - no prefix/suffix\n    {\n      size: \"sm\",\n      hasStart: false,\n      hasEnd: false,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"px-3\",\n    },\n    {\n      size: \"sm\",\n      hasStart: true,\n      hasEnd: false,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-7 pr-3\",\n    },\n    {\n      size: \"sm\",\n      hasStart: false,\n      hasEnd: true,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-3 pr-7\",\n    },\n    {\n      size: \"sm\",\n      hasStart: true,\n      hasEnd: true,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-7 pr-7\",\n    },\n\n    // Small size padding - with prefix (no left padding)\n    {\n      size: \"sm\",\n      hasPrefix: true,\n      hasEnd: false,\n      hasSuffix: false,\n      class: \"pr-3\",\n    },\n    {\n      size: \"sm\",\n      hasPrefix: true,\n      hasEnd: true,\n      hasSuffix: false,\n      class: \"pr-7\",\n    },\n\n    // Small size padding - with suffix (no right padding)\n    {\n      size: \"sm\",\n      hasStart: false,\n      hasSuffix: true,\n      hasPrefix: false,\n      class: \"pl-3\",\n    },\n    {\n      size: \"sm\",\n      hasStart: true,\n      hasSuffix: true,\n      hasPrefix: false,\n      class: \"pl-7\",\n    },\n\n    // Small size padding - with both prefix and suffix (no horizontal padding)\n    { size: \"sm\", hasPrefix: true, hasSuffix: true, class: \"\" },\n\n    // Default size padding - no prefix/suffix\n    {\n      size: \"default\",\n      hasStart: false,\n      hasEnd: false,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"px-4\",\n    },\n    {\n      size: \"default\",\n      hasStart: true,\n      hasEnd: false,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-8 pr-4\",\n    },\n    {\n      size: \"default\",\n      hasStart: false,\n      hasEnd: true,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-4 pr-8\",\n    },\n    {\n      size: \"default\",\n      hasStart: true,\n      hasEnd: true,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-8 pr-8\",\n    },\n\n    // Default size padding - with prefix (no left padding)\n    {\n      size: \"default\",\n      hasPrefix: true,\n      hasEnd: false,\n      hasSuffix: false,\n      class: \"pr-4\",\n    },\n    {\n      size: \"default\",\n      hasPrefix: true,\n      hasEnd: true,\n      hasSuffix: false,\n      class: \"pr-8\",\n    },\n\n    // Default size padding - with suffix (no right padding)\n    {\n      size: \"default\",\n      hasStart: false,\n      hasSuffix: true,\n      hasPrefix: false,\n      class: \"pl-4\",\n    },\n    {\n      size: \"default\",\n      hasStart: true,\n      hasSuffix: true,\n      hasPrefix: false,\n      class: \"pl-8\",\n    },\n\n    // Default size padding - with both prefix and suffix (no horizontal padding)\n    { size: \"default\", hasPrefix: true, hasSuffix: true, class: \"\" },\n\n    // Large size padding - no prefix/suffix\n    {\n      size: \"lg\",\n      hasStart: false,\n      hasEnd: false,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"px-6\",\n    },\n    {\n      size: \"lg\",\n      hasStart: true,\n      hasEnd: false,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-9 pr-6\",\n    },\n    {\n      size: \"lg\",\n      hasStart: false,\n      hasEnd: true,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-6 pr-9\",\n    },\n    {\n      size: \"lg\",\n      hasStart: true,\n      hasEnd: true,\n      hasPrefix: false,\n      hasSuffix: false,\n      class: \"pl-9 pr-9\",\n    },\n\n    // Large size padding - with prefix (no left padding)\n    {\n      size: \"lg\",\n      hasPrefix: true,\n      hasEnd: false,\n      hasSuffix: false,\n      class: \"pr-6\",\n    },\n    {\n      size: \"lg\",\n      hasPrefix: true,\n      hasEnd: true,\n      hasSuffix: false,\n      class: \"pr-9\",\n    },\n\n    // Large size padding - with suffix (no right padding)\n    {\n      size: \"lg\",\n      hasStart: false,\n      hasSuffix: true,\n      hasPrefix: false,\n      class: \"pl-6\",\n    },\n    {\n      size: \"lg\",\n      hasStart: true,\n      hasSuffix: true,\n      hasPrefix: false,\n      class: \"pl-9\",\n    },\n\n    // Large size padding - with both prefix and suffix (no horizontal padding)\n    { size: \"lg\", hasPrefix: true, hasSuffix: true, class: \"\" },\n\n    // Icon size padding (typically no padding for square icons)\n    { size: \"icon\", hasStart: false, hasEnd: false, class: \"\" },\n    { size: \"icon\", hasStart: true, hasEnd: false, class: \"\" },\n    { size: \"icon\", hasStart: false, hasEnd: true, class: \"\" },\n    { size: \"icon\", hasStart: true, hasEnd: true, class: \"\" },\n    { size: \"icon\", hasPrefix: true, class: \"\" },\n    { size: \"icon\", hasSuffix: true, class: \"\" },\n  ],\n  defaultVariants: {\n    size: \"default\",\n    hasStart: false,\n    hasEnd: false,\n    hasPrefix: false,\n    hasSuffix: false,\n  },\n});\n\n/**\n * Generic slot positioning variants - handles absolute positioning of start/end/prefix/suffix elements\n */\nexport const slotPositionVariants = cva(\n  \"absolute top-1/2 -translate-y-1/2 z-10 pointer-events-none\",\n  {\n    variants: {\n      size: {\n        sm: \"\",\n        default: \"\",\n        lg: \"\",\n        icon: \"\",\n      },\n      position: {\n        start: \"\",\n        end: \"\",\n        prefix: \"\",\n        suffix: \"\",\n      },\n    },\n    compoundVariants: [\n      // Start positioning (absolute positioned)\n      { size: \"sm\", position: \"start\", class: \"left-2\" },\n      { size: \"sm\", position: \"end\", class: \"right-2\" },\n      { size: \"default\", position: \"start\", class: \"left-2\" },\n      { size: \"default\", position: \"end\", class: \"right-2\" },\n      { size: \"lg\", position: \"start\", class: \"left-3\" },\n      { size: \"lg\", position: \"end\", class: \"right-3\" },\n      { size: \"icon\", position: \"start\", class: \"left-2\" },\n      { size: \"icon\", position: \"end\", class: \"right-2\" },\n\n      // Prefix positioning (flows with content, left side)\n      { size: \"sm\", position: \"prefix\", class: \"left-2\" },\n      { size: \"default\", position: \"prefix\", class: \"left-2\" },\n      { size: \"lg\", position: \"prefix\", class: \"left-3\" },\n      { size: \"icon\", position: \"prefix\", class: \"left-2\" },\n\n      // Suffix positioning (flows with content, right side)\n      { size: \"sm\", position: \"suffix\", class: \"right-2\" },\n      { size: \"default\", position: \"suffix\", class: \"right-2\" },\n      { size: \"lg\", position: \"suffix\", class: \"right-3\" },\n      { size: \"icon\", position: \"suffix\", class: \"right-2\" },\n    ],\n    defaultVariants: {\n      size: \"default\",\n      position: \"start\",\n    },\n  }\n);\n\n/**\n * Helper function to create slot-enabled component props\n */\nexport interface SlotProps {\n  start?: React.ReactNode;\n  end?: React.ReactNode;\n  loading?: boolean;\n  renderLoading?: (loading: boolean) => React.ReactNode;\n  prefix?: React.ReactNode;\n  suffix?: React.ReactNode;\n}\n\n/**\n * Hook to get slot states and classes\n */\nexport function useSlots({\n  start,\n  end,\n  loading,\n  size = \"default\",\n  prefix,\n  suffix,\n  startWidth,\n  endWidth,\n}: SlotProps & { size?: SlotSize } & {\n  startWidth?: number;\n  endWidth?: number;\n}) {\n  const hasStart = Boolean(start);\n  const hasEnd = Boolean(end || loading);\n  const hasPrefix = Boolean(prefix);\n  const hasSuffix = Boolean(suffix);\n\n  // Determine if we have dynamic widths available\n  const hasDynamicStart = hasStart && startWidth;\n  const hasDynamicEnd = hasEnd && endWidth;\n\n  // Only use base padding classes when we don't have dynamic widths\n  const basePaddingClass =\n    hasDynamicStart || hasDynamicEnd\n      ? \"\"\n      : slotPaddingVariants({\n          size,\n          hasStart,\n          hasEnd,\n          hasPrefix,\n          hasSuffix,\n        });\n\n  // Calculate dynamic padding styles when width is available\n  const getDynamicPaddingStyle = () => {\n    const style: React.CSSProperties = {};\n\n    // Handle left padding (start or prefix take priority over static padding)\n    if (hasDynamicStart) {\n      style.paddingLeft = `${startWidth + 16}px`;\n    } else if (hasPrefix) {\n      // No left padding for prefix\n    } else if (!basePaddingClass) {\n      // Use default padding based on size when not using class-based padding\n      const defaultLeftPadding = size === \"sm\" ? 12 : size === \"lg\" ? 24 : 16; // px-3, px-6, px-4\n      style.paddingLeft = `${defaultLeftPadding}px`;\n    }\n\n    // Handle right padding (end or suffix take priority over static padding)\n    if (hasDynamicEnd) {\n      style.paddingRight = `${endWidth + 16}px`;\n    } else if (hasSuffix) {\n      // No right padding for suffix\n    } else if (!basePaddingClass) {\n      // Use default padding based on size when not using class-based padding\n      const defaultRightPadding = size === \"sm\" ? 12 : size === \"lg\" ? 24 : 16; // px-3, px-6, px-4\n      style.paddingRight = `${defaultRightPadding}px`;\n    }\n\n    return style;\n  };\n\n  const startPositionClass = slotPositionVariants({ size, position: \"start\" });\n  const endPositionClass = slotPositionVariants({ size, position: \"end\" });\n  const prefixPositionClass = slotPositionVariants({\n    size,\n    position: \"prefix\",\n  });\n  const suffixPositionClass = slotPositionVariants({\n    size,\n    position: \"suffix\",\n  });\n\n  return {\n    hasStart,\n    hasEnd,\n    hasPrefix,\n    hasSuffix,\n    paddingClass: basePaddingClass,\n    paddingStyle: getDynamicPaddingStyle(),\n    startPositionClass,\n    endPositionClass,\n    prefixPositionClass,\n    suffixPositionClass,\n  };\n}\n",
      "type": "registry:lib"
    }
  ]
}