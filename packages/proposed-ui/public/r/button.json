{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "Button",
  "description": "A versatile button component with slot-based composition",
  "dependencies": [
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "src/components/button.tsx",
      "content": "import { cva, type VariantProps } from \"class-variance-authority\";\nimport { Slot as SlotPrimitive } from \"radix-ui\";\nimport type { ComponentProps } from \"react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-rp-ring focus-visible:ring-rp-ring/50 focus-visible:ring-[3px] aria-invalid:ring-rp-destructive/20 dark:aria-invalid:ring-rp-destructive/40 aria-invalid:border-rp-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-rp-primary text-rp-primary-foreground shadow-xs hover:bg-rp-primary/90\",\n        destructive:\n          \"bg-rp-destructive text-white shadow-xs hover:bg-rp-destructive/90 focus-visible:ring-rp-destructive/20 dark:focus-visible:ring-rp-destructive/40 dark:bg-rp-destructive/60\",\n        outline:\n          \"border bg-rp-background shadow-xs hover:bg-rp-accent hover:text-rp-accent-foreground dark:bg-rp-input/30 dark:border-rp-input dark:hover:bg-rp-input/50\",\n        secondary: \"bg-rp-secondary text-rp-secondary-foreground shadow-xs hover:bg-rp-secondary/80\",\n        ghost: \"hover:bg-rp-accent hover:text-rp-accent-foreground dark:hover:bg-rp-accent/50\",\n        link: \"text-rp-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : \"button\";\n\n  return <Comp data-slot=\"button\" className={cn(buttonVariants({ variant, size, className }))} {...props} />;\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    }
  ]
}