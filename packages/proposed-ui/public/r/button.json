{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "Button",
  "description": "A versatile button component with slot-based composition",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "src/components/button.tsx",
      "content": "import { useGroupContext } from \"@/lib/group-context\";\nimport { type SlotProps, useSlots } from \"@/lib/slot-utils\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { Slot as SlotPrimitive } from \"radix-ui\";\nimport type { ComponentProps } from \"react\";\nimport * as React from \"react\";\n\nconst buttonVariants = cva(\n  \"flex justify-center text-center items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-rp-ring focus-visible:ring-rp-ring/50 focus-visible:ring-[3px] aria-invalid:ring-rp-destructive/20 dark:aria-invalid:ring-rp-destructive/40 aria-invalid:border-rp-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-rp-primary text-rp-primary-foreground shadow-xs hover:bg-rp-primary/90\",\n        destructive:\n          \"bg-rp-destructive text-white shadow-xs hover:bg-rp-destructive/90 focus-visible:ring-rp-destructive/20 dark:focus-visible:ring-rp-destructive/40 dark:bg-rp-destructive/60\",\n        outline:\n          \"border bg-rp-background shadow-xs hover:bg-rp-accent hover:text-rp-accent-foreground dark:bg-rp-input/30 dark:border-rp-input dark:hover:bg-rp-input/50\",\n        secondary:\n          \"bg-rp-secondary text-rp-secondary-foreground shadow-xs hover:bg-rp-secondary/80\",\n        ghost:\n          \"hover:bg-rp-accent hover:text-rp-accent-foreground dark:hover:bg-rp-accent/50\",\n        link: \"text-rp-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 py-2\",\n        sm: \"h-8 gap-1.5\",\n        lg: \"h-10\",\n        icon: \"size-9\",\n      },\n      isPrefix: {\n        true: \"rounded-l-md rounded-r-none\",\n        false: \"rounded-r-md\",\n      },\n      isSuffix: {\n        true: \"rounded-r-md rounded-l-none\",\n        false: \"rounded-l-md\",\n      },\n    },\n    compoundVariants: [\n      {\n        isPrefix: false,\n        isSuffix: false,\n        class: \"rounded-md\",\n      },\n      {\n        isPrefix: true,\n        isSuffix: true,\n        class: \"rounded-none\",\n      },\n    ],\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      isPrefix: false,\n      isSuffix: false,\n    },\n  }\n);\n\ntype ButtonProps = ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  } & SlotProps;\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  start,\n  end,\n  loading,\n  renderLoading,\n  children,\n  ...props\n}: ButtonProps) {\n  const { isPrefix, isSuffix } = useGroupContext();\n  const Comp = asChild ? SlotPrimitive.Slot : \"button\";\n  const { paddingClass, startPositionClass, endPositionClass } = useSlots({\n    start,\n    end,\n    loading,\n    size,\n  });\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({ variant, size, isPrefix, isSuffix }),\n        paddingClass,\n        \"relative\",\n        className\n      )}\n      {...props}\n    >\n      {start && (\n        <span className={startPositionClass} data-slot=\"start\">\n          {start}\n        </span>\n      )}\n      {children}\n      {(end || loading) && (\n        <span className={endPositionClass} data-slot=\"end\">\n          {loading ? renderLoading?.(loading) ?? loading : end}\n        </span>\n      )}\n    </Comp>\n  );\n}\n\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    }
  ]
}