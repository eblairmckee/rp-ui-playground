{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:component",
  "title": "Input",
  "description": "A flexible input component with slot-based composition",
  "dependencies": [
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "src/components/input.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { Loader } from \"lucide-react\";\nimport { createContext, useEffect, useState, type ComponentProps } from \"react\";\nimport * as React from \"react\";\n\ntype InputProps = {\n  children: React.ReactNode;\n  loading?: boolean;\n  renderLoading?: (loading: boolean) => React.ReactNode;\n  \"data-group-position\"?: \"first\" | \"last\" | \"middle\" | undefined;\n  className?: string;\n};\n\nconst inputEndClassNames = \"absolute top-1/2 -translate-y-1/2 z-10 pointer-events-none right-2\";\n\nconst InputContext = createContext<{\n  setStartWidth: (width: number) => void;\n  setEndWidth: (width: number) => void;\n  startWidth: number | undefined;\n  endWidth: number | undefined;\n  loading: boolean;\n  renderLoading: ((loading: boolean) => React.ReactNode) | undefined;\n  groupPosition: \"first\" | \"last\" | \"middle\" | undefined;\n}>({\n  setStartWidth: () => {},\n  setEndWidth: () => {},\n  startWidth: undefined,\n  endWidth: undefined,\n  loading: false,\n  renderLoading: () => null,\n  groupPosition: undefined,\n});\n\nconst useInputContext = () => {\n  const context = React.useContext(InputContext);\n  if (!context) {\n    throw new Error(\"useInputContext must be used within an InputContextProvider\");\n  }\n  return context;\n};\n\nfunction InputRoot({\n  loading = false,\n  renderLoading,\n  children,\n  \"data-group-position\": groupPosition,\n  className,\n}: InputProps) {\n  const [startWidth, setStartWidth] = useState<number | undefined>();\n  const [endWidth, setEndWidth] = useState<number | undefined>();\n\n  return (\n    <InputContext.Provider\n      value={{\n        startWidth,\n        setStartWidth,\n        endWidth,\n        setEndWidth,\n        loading,\n        renderLoading,\n        groupPosition,\n      }}\n    >\n      <div className={cn(\"flex\", className)}>{children}</div>\n    </InputContext.Provider>\n  );\n}\n\nconst Input = ({ children, type, className, ...props }: ComponentProps<\"input\">) => {\n  const { startWidth, endWidth, loading, groupPosition, renderLoading } = useInputContext();\n\n  return (\n    <div className=\"flex items-center relative\">\n      <input\n        type={type}\n        data-slot=\"input\"\n        className={cn(\n          \"rounded-md file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 border bg-transparent py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n          groupPosition === \"first\"\n            ? \"rounded-r-none\"\n            : groupPosition === \"last\"\n              ? \"rounded-l-none\"\n              : groupPosition === \"middle\"\n                ? \"rounded-none\"\n                : \"rounded-md\",\n          !(startWidth || endWidth) && \"px-3\",\n          className,\n        )}\n        style={{\n          paddingLeft: startWidth ? startWidth + 16 : undefined,\n          paddingRight: endWidth ? endWidth + 16 : undefined,\n        }}\n        {...props}\n      />\n      {children}\n      {loading ? (\n        <div className={inputEndClassNames}>{renderLoading?.(loading) ?? <Loader size={15} />}</div>\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n\nconst InputStart = ({ children, className, ...props }: { children: React.ReactNode; className?: string }) => {\n  const { setStartWidth } = useInputContext();\n  const startRef = React.useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    setStartWidth(startRef.current?.offsetWidth ?? 0);\n  }, [setStartWidth]);\n\n  return (\n    <span\n      className={cn(\"absolute top-1/2 -translate-y-1/2 z-10 pointer-events-none left-2\", className)}\n      ref={startRef}\n      {...props}\n    >\n      {children}\n    </span>\n  );\n};\n\nconst InputEnd = ({ children, className, ...props }: { children: React.ReactNode; className?: string }) => {\n  const { setEndWidth, loading } = useInputContext();\n  const endRef = React.useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    setEndWidth(endRef.current?.offsetWidth ?? 0);\n  }, [setEndWidth]);\n\n  if (loading) return null;\n  return (\n    <span className={cn(inputEndClassNames, className)} ref={endRef} {...props}>\n      {children}\n    </span>\n  );\n};\n\nexport { InputRoot, Input, InputStart, InputEnd };\n",
      "type": "registry:component"
    }
  ]
}